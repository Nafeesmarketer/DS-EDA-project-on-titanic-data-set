# -*- coding: utf-8 -*-
"""Titanic.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FVIuSEf975fBB0jpSve7ivan9zyDCWFd
"""

!pip install pandas
import pandas as pd
!pip install numpy
import numpy as np
!pip install seaborn
import seaborn as sns
!pip install matplotlib
import matplotlib.pyplot as plt

ti=pd.read_csv("/content/titanic.csv")

ti.shape

ti.head(3)

ti.tail(3)

ti.info()

ti.describe()

ti.count()

sns.heatmap(ti.isnull(),yticklabels=False,cbar=False,cmap="tab20c_r")
plt.title("missing data")
plt.show()

ti.drop("Cabin",axis=1,inplace=True)

#age with respect to p_class
plt.figure(figsize=(8,5))
sns.boxplot(x="Pclass",y="Age",data=ti,palette='GnBu_d').set_title('Age by Pclass')
plt.show()

# Imputation function
"""def impute_age(cols):
    Age = cols[0]
    Pclass = cols[1]

    if pd.isnull(Age):

        if Pclass == 1:
            return 37

        elif Pclass == 2:

            return 29

        else:
            return 24

    else:
        return Age

# Apply the function to the Age column
full_data['Age']=full_data[['Age','Pclass']].apply(impute_age, axis =1 )"""

def impute_age(cols):
  Age=cols[0]
  Pclass=cols[1]
  if pd.isnull(Age):
    if Pclass==1:
      return 37
    elif Pclass==2:
      return 29
    else:
      return 24
  else:
    return Age

ti['Age']=ti[['Age','Pclass']].apply(impute_age, axis =1)

ti.dropna(inplace=True)

sns.heatmap(ti.isnull(),yticklabels=False,cbar=False,cmap="tab20c_r")
plt.title("Missing data values")
plt.show()

sns.distplot(ti["Age"],hist=False)
plt.show()

plt.figure(figsize=(7,7))
sns.scatterplot(x="Age",y="Fare",hue="Sex",data=ti)
plt.show()

plt.figure(figsize=(8,8))
sns.barplot(x="Sex",y="Survived",hue="Pclass",data=ti)
plt.show()

sns.swarmplot(x="Sex",y="Age",data=ti)

sns.swarmplot(x="Sex",y="Age",data=ti,hue="Sex")

#if you want a more representative and beautiful plot the try this type of code
plt.figure(figsize=(8,8))
sns.swarmplot(x='Sex',y='Age',hue='Sex',data=ti)
plt.show()

plt.figure(figsize=(8,8))
sns.boxplot(x='Survived',y='Age',data=ti)
plt.show()

sns.countplot(x='Sex',data=ti)

sns.countplot(x='Survived',data=ti,palette="Greens")